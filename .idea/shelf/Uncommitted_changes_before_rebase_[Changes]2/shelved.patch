Index: backend/Electro1DTests/ProteinTest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># @author Amr Mualla, Mack Leonard\r\n# Testing for Protein Class\r\n# To run: python3 -m unittest backend.Electro1DTests.ProteinTest\r\nimport unittest\r\n\r\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\r\n\r\nfrom backend.Electro1D.Protein import Protein\r\n\r\n\r\nclass TestProtein(unittest.TestCase):\r\n\r\n    def setUp(self):\r\n        self.protein = Protein()\r\n\r\n    def test_default_values(self):\r\n        self.assertEqual(self.protein.name, \"notSet\")\r\n        self.assertEqual(self.protein.full_name, \"notSet\")\r\n        self.assertEqual(self.protein.abbr, \"notSet\")\r\n        self.assertEqual(self.protein.mw, 0)\r\n        self.assertEqual(self.protein.color, (0, 0, 255))\r\n\r\n    def test_set_start_position(self):\r\n        self.protein.set_start_position(10, 20)\r\n        self.assertEqual(self.protein.x1, 10)\r\n        self.assertEqual(self.protein.y1, 20)\r\n        self.assertEqual(self.protein.start_y, 20)\r\n        self.assertEqual(self.protein.y1_float, 20.0)\r\n\r\n    def test_reset_decider(self):\r\n        self.protein.decider = 5\r\n        self.protein.counter = 3\r\n        self.protein.reset_decider()\r\n        self.assertEqual(self.protein.decider, 1)\r\n        self.assertEqual(self.protein.counter, 1)\r\n\r\n    def test_incr_position(self):\r\n        self.protein.y1_float = 10.0\r\n        self.protein.speed = 1.0\r\n        self.protein.incr_position()\r\n        self.assertEqual(self.protein.y1_float, 11.0)\r\n        self.assertEqual(self.protein.y1, 11)\r\n\r\n    def test_match_position(self):\r\n        self.protein.x1 = 10\r\n        self.protein.y1 = 10\r\n        self.protein.width = 5\r\n        self.protein.height = 5\r\n        self.assertTrue(self.protein.match_position(11, 11))\r\n        self.assertFalse(self.protein.match_position(20, 20))\r\n\r\n    def test_set_width(self):\r\n        self.protein.set_width(10)\r\n        self.assertEqual(self.protein.width, 10)\r\n\r\n    def test_get_decider(self):\r\n        self.protein.decider = 1\r\n        self.assertEqual(self.protein.get_decider(), 1)\r\n\r\n    def test_set_decider(self):\r\n        self.protein.decider = 0\r\n        self.protein.set_decider(1)\r\n        self.assertEqual(self.protein.get_decider(), 1)\r\n\r\n    def test_set_concentration(self):\r\n        self.protein.set_concentration(5)\r\n        self.assertEqual(self.protein.concentration, 5)\r\n\r\n    def test_match_plot_position(self):\r\n        self.protein.plot_x_pos = 10\r\n        self.protein.plot_y_pos = 10\r\n        self.assertTrue(self.protein.match_plot_position(11, 11))\r\n        self.assertFalse(self.protein.match_plot_position(20, 20))\r\n\r\n    def test_get_distance(self):\r\n        self.protein.y1 = 15\r\n        self.protein.start_y = 10\r\n        self.protein.scale_factor = 2\r\n        self.assertEqual(self.protein.get_distance(), 10.0)\r\n\r\n    def test_parse_orchid_protein(self):\r\n        with open(\"Electro1DSampleTestFiles/ls_orchid.fasta\") as file:\r\n            parsed_sequence = self.protein.parse_protein(file)\r\n        self.assertIsInstance(parsed_sequence, dict)\r\n    def test_get_orchid_mw(self):\r\n        expected_mw = 5604122.421700024\r\n        actual_mw = 0\r\n        with open(\"Electro1DSampleTestFiles/ls_orchid.fasta\") as file:\r\n            mw_list = self.protein.get_mw(file)\r\n        for item in mw_list:\r\n            actual_mw += item\r\n        print()\r\n        print(\"Expected orchid molecular weight: \", expected_mw)\r\n        print(\"Actual orchid molecular weight: \", actual_mw)\r\n        print()\r\n        self.assertEqual(expected_mw, actual_mw)\r\n\r\n    def test_get_orchid_amino_acid_count(self):\r\n        expected_amino_acid_count = {'A': 135, 'C': 136, 'D': 0, 'E': 0, 'F': 0, 'G': 160, 'H': 0, 'I': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 161, 'V': 0, 'W': 0, 'Y': 0}\r\n        with open(\"Electro1DSampleTestFiles/ls_orchid.fasta\") as file:\r\n            actual_amino_acid_count = self.protein.get_amino_acid_count(file)\r\n        self.assertIn(expected_amino_acid_count, actual_amino_acid_count)\r\n\r\n    def test_parse_e_coliK12_protein(self):\r\n        with open(\"Electro1DSampleTestFiles/e_coliK12.faa\") as file:\r\n            parsed_sequence = self.protein.parse_protein(file)\r\n        self.assertIsInstance(parsed_sequence, dict)\r\n\r\n    def test_get_e_coliK12_mw(self):\r\n        expected_mw = 150560054.08059993\r\n        actual_mw = 0\r\n        with open(\"Electro1DSampleTestFiles/e_coliK12.faa\") as file:\r\n            mw_list = self.protein.get_mw(file)\r\n        for item in mw_list:\r\n            actual_mw += item\r\n        print()\r\n        print(\"Expected E. coli K12 molecular weight: \", expected_mw)\r\n        print(\"Actual E. coli K12 molecular weight: \", actual_mw)\r\n        print()\r\n        self.assertEqual(expected_mw, actual_mw)\r\n\r\n    def test_get_ecoliK12_amino_acid_cound(self):\r\n        expected_amino_acid_count = {'A': 30, 'C': 1, 'D': 16, 'E': 12, 'F': 4, 'G': 9, 'H': 8, 'I': 12, 'K': 8, 'L': 30, 'M': 8, 'N': 5, 'P': 8, 'Q': 11, 'R': 13, 'S': 11, 'T': 17, 'V': 16, 'W': 3, 'Y': 6}\r\n        with open(\"Electro1DSampleTestFiles/e_coliK12.faa\") as file:\r\n            actual_amino_acid_count = self.protein.get_amino_acid_count(file)\r\n        self.assertIn(expected_amino_acid_count, actual_amino_acid_count)\r\n\r\n    def test_standards_mw(self):\r\n        expected_mw = 396728.9295000013\r\n        actual_mw = 0\r\n        with open(\"Electro1DSampleTestFiles/electrophoresis1dStandards.fasta\") as file:\r\n            mw_list = self.protein.get_mw(file)\r\n        print(mw_list)\r\n        for item in mw_list:\r\n            actual_mw += item\r\n        print()\r\n        print(\"Expected standards molecular weight: \", expected_mw)\r\n        print(\"Actual standards molecular weight: \", actual_mw)\r\n        print()\r\n        self.assertEqual(expected_mw, actual_mw)\r\n\r\n    def test_standards_parse(self):\r\n        with open(\"Electro1DSampleTestFiles/electrophoresis1dStandards.fasta\") as file:\r\n            parsed_protein = self.protein.parse_protein(file)\r\n        print(parsed_protein)\r\n        for record_id in parsed_protein:\r\n            protein = parsed_protein.get(record_id)[0]\r\n            print(protein)\r\n\r\n\r\n\r\n    def test_individual_mw(self):\r\n        with open(\"Electro1DSampleTestFiles/electrophoresis1dStandards.fasta\") as file:\r\n            expected_mw_list = self.protein.get_mw(file)\r\n        with open(\"Electro1DSampleTestFiles/electrophoresis1dStandards.fasta\") as file:\r\n            parsed_protein = self.protein.parse_protein(file)\r\n        actual_mw_list = []\r\n        for record_id in parsed_protein:\r\n            protein = parsed_protein.get(record_id)\r\n            sequence = ProteinAnalysis(protein[1])\r\n            actual_individual_mw = sequence.molecular_weight()\r\n            print()\r\n            print(parsed_protein.get(record_id)[0], \": Derived molecular weight:\", actual_individual_mw)\r\n            actual_mw_list.append(actual_individual_mw)\r\n\r\n        self.assertEqual(expected_mw_list, actual_mw_list)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    unittest.main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/Electro1DTests/ProteinTest.py b/backend/Electro1DTests/ProteinTest.py
--- a/backend/Electro1DTests/ProteinTest.py	(revision d8712e6d5c6474c864364a494c02ba1400717eb9)
+++ b/backend/Electro1DTests/ProteinTest.py	(date 1706589025255)
@@ -83,7 +83,7 @@
             parsed_sequence = self.protein.parse_protein(file)
         self.assertIsInstance(parsed_sequence, dict)
     def test_get_orchid_mw(self):
-        expected_mw = 5604122.421700024
+        expected_mw = 5604122.421699999
         actual_mw = 0
         with open("Electro1DSampleTestFiles/ls_orchid.fasta") as file:
             mw_list = self.protein.get_mw(file)
@@ -107,7 +107,7 @@
         self.assertIsInstance(parsed_sequence, dict)
 
     def test_get_e_coliK12_mw(self):
-        expected_mw = 150560054.08059993
+        expected_mw = 150560054.08059976
         actual_mw = 0
         with open("Electro1DSampleTestFiles/e_coliK12.faa") as file:
             mw_list = self.protein.get_mw(file)
@@ -126,7 +126,7 @@
         self.assertIn(expected_amino_acid_count, actual_amino_acid_count)
 
     def test_standards_mw(self):
-        expected_mw = 396728.9295000013
+        expected_mw = 396728.9295
         actual_mw = 0
         with open("Electro1DSampleTestFiles/electrophoresis1dStandards.fasta") as file:
             mw_list = self.protein.get_mw(file)
