Index: backend/Electro1DTests/ProteinTest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># @author Amr Mualla, Mack Leonard\r\n# Testing for Protein Class\r\n# To run: python3 -m unittest backend.Electro1DTests.ProteinTest\r\nimport unittest\r\nfrom backend.Electro1D.Protein import Protein\r\n\r\n\r\nclass TestProtein(unittest.TestCase):\r\n\r\n    def setUp(self):\r\n        self.protein = Protein()\r\n\r\n    def test_default_values(self):\r\n        self.assertEqual(self.protein.name, \"notSet\")\r\n        self.assertEqual(self.protein.full_name, \"notSet\")\r\n        self.assertEqual(self.protein.abbr, \"notSet\")\r\n        self.assertEqual(self.protein.mw, 0)\r\n        self.assertEqual(self.protein.color, (0, 0, 255))\r\n\r\n    def test_set_start_position(self):\r\n        self.protein.set_start_position(10, 20)\r\n        self.assertEqual(self.protein.x1, 10)\r\n        self.assertEqual(self.protein.y1, 20)\r\n        self.assertEqual(self.protein.start_y, 20)\r\n        self.assertEqual(self.protein.y1_float, 20.0)\r\n\r\n    def test_reset_decider(self):\r\n        self.protein.decider = 5\r\n        self.protein.counter = 3\r\n        self.protein.reset_decider()\r\n        self.assertEqual(self.protein.decider, 1)\r\n        self.assertEqual(self.protein.counter, 1)\r\n\r\n    def test_incr_position(self):\r\n        self.protein.y1_float = 10.0\r\n        self.protein.speed = 1.0\r\n        self.protein.incr_position()\r\n        self.assertEqual(self.protein.y1_float, 11.0)\r\n        self.assertEqual(self.protein.y1, 11)\r\n\r\n    def test_match_position(self):\r\n        self.protein.x1 = 10\r\n        self.protein.y1 = 10\r\n        self.protein.width = 5\r\n        self.protein.height = 5\r\n        self.assertTrue(self.protein.match_position(11, 11))\r\n        self.assertFalse(self.protein.match_position(20, 20))\r\n\r\n    def test_set_width(self):\r\n        self.protein.set_width(10)\r\n        self.assertEqual(self.protein.width, 10)\r\n\r\n    def test_get_decider(self):\r\n        self.protein.decider = 1\r\n        self.assertEqual(self.protein.get_decider(), 1)\r\n\r\n    def test_set_decider(self):\r\n        self.protein.decider = 0\r\n        self.protein.set_decider(1)\r\n        self.assertEqual(self.protein.get_decider(), 1)\r\n\r\n    def test_set_concentration(self):\r\n        self.protein.set_concentration(5)\r\n        self.assertEqual(self.protein.concentration, 5)\r\n\r\n    def test_match_plot_position(self):\r\n        self.protein.plot_x_pos = 10\r\n        self.protein.plot_y_pos = 10\r\n        self.assertTrue(self.protein.match_plot_position(11, 11))\r\n        self.assertFalse(self.protein.match_plot_position(20, 20))\r\n\r\n    def test_get_distance(self):\r\n        self.protein.y1 = 15\r\n        self.protein.start_y = 10\r\n        self.protein.scale_factor = 2\r\n        self.assertEqual(self.protein.get_distance(), 10.0)\r\n\r\n    def test_parse_orchid_protein(self):\r\n        with open(\"Electro1DSampleTestFiles/ls_orchid.fasta\") as file:\r\n            parsed_sequence = self.protein.parse_protein(file)\r\n        self.assertEqual(parsed_sequence[0], \"gi|2765564|emb|Z78439.1|PBZ78439\")\r\n        self.assertEqual(str(parsed_sequence[1]), \"CATTGTTGAGATCACATAATAATTGATCGAGTTAATCTGGAGGATCTGTTTACTTTGGTCACCCATGGGCATTTGCTGTTGAAGTGACCTAGATTTGCCATCGAGCCTCCTTGGGAGCTTTCTTGTTGGCGAGATCTAAACCCCTGCCCGGCGGAGTTGGGCGCCAAGTCATATGACACATAATTGGTGAAGGGGGTGGTAATCCTGCCCTGACCCTCCCCAAATTATTTTTTTAACAACTCTCAGCAACGGATATCTCGGCTCTTGCATCGATGAAGAACGCAGCGAAATGCGATAATGGTGTGAATTGCAGAATCCCGTGAACATCGAGTCTTTGAACGCAAGTTGCGCCCGAGGCCATCAGGCCAAGGGCACGCCTGCCTGGGCATTGCGAGTCATATCTCTCCCTTAATGAGGCTGTCCATACATACTGTTCAGCCGGTGCGGATGTGAGTTTGGCCCCTTGTTCTTTGGTACGGGGGGTCTAAGAGCTGCATGGGCTTTGGATGGTCCTAAATACGGAAAGAGGTGGACGAACTATGCTACAACAAAATTGTTGTGCAAATGCCCCGGTTGGCCGTTTAGTTGGGCC\")\r\n        self.assertEqual(parsed_sequence[2], 592)\r\n        self.assertEqual(parsed_sequence[3], \"gi|2765564|emb|Z78439.1|PBZ78439 P.barbatum 5.8S rRNA gene and ITS1 and ITS2 DNA\")\r\n\r\n    def test_get_orchid_mw(self):\r\n        expected_mw = 49046.902099999956\r\n        with open(\"Electro1DSampleTestFiles/ls_orchid.fasta\") as file:\r\n            actual_mw = self.protein.get_mw(file)\r\n        self.assertEqual(expected_mw, actual_mw)\r\n\r\n    def test_get_orchid_amino_acid_count(self):\r\n        expected_amino_acid_count = {'A': 135, 'C': 136, 'D': 0, 'E': 0, 'F': 0, 'G': 160, 'H': 0, 'I': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 161, 'V': 0, 'W': 0, 'Y': 0}\r\n        with open(\"Electro1DSampleTestFiles/ls_orchid.fasta\") as file:\r\n            actual_amino_acid_count = self.protein.get_amino_acid_count(file)\r\n        self.assertEqual(expected_amino_acid_count, actual_amino_acid_count)\r\n\r\n    def test_parse_e_coliK12_protein(self):\r\n        with open(\"Electro1DSampleTestFiles/e_coliK12.faa\") as file:\r\n            parsed_sequence = self.protein.parse_protein(file)\r\n        self.assertEqual(parsed_sequence[0], \"gi|1790865|gb|AAC77356.1|\")\r\n        self.assertEqual(parsed_sequence[1], \"MRITIILVAPARAENIGAAARAMKTMGFSDLRIVDSQAHLEPATRWVAHGSGDIIDNIKVFPTLAESLHDVDFTVATTARSRAKYHYYATPVELVPLLEEKSSWMSHAALVFGREDSGLTNEELALADVLTGVPMVADYPSLNLGQAVMVYCYQLATLIQQPAKSDATADQHQLQALRERAMTLLTTLAVADDIKLVDWLQQRLGLLEQRDTAMLHRLLHDIEKNITK\")\r\n        self.assertEqual(parsed_sequence[2], 228)\r\n        self.assertEqual(parsed_sequence[3], \"gi|1790865|gb|AAC77356.1| orf, hypothetical protein [Escherichia coli K12]\")\r\n\r\n    def test_get_e_coliK12_mw(self):\r\n        expected_mw = 25258.74990000001\r\n        with open(\"Electro1DSampleTestFiles/e_coliK12.faa\") as file:\r\n            actual_mw = self.protein.get_mw(file)\r\n        self.assertEqual(expected_mw, actual_mw)\r\n\r\n    def test_get_ecoliK12_amino_acid_cound(self):\r\n        expected_amino_acid_count = {'A': 30, 'C': 1, 'D': 16, 'E': 12, 'F': 4, 'G': 9, 'H': 8, 'I': 12, 'K': 8, 'L': 30, 'M': 8, 'N': 5, 'P': 8, 'Q': 11, 'R': 13, 'S': 11, 'T': 17, 'V': 16, 'W': 3, 'Y': 6}\r\n        with open(\"Electro1DSampleTestFiles/e_coliK12.faa\") as file:\r\n            actual_amino_acid_count = self.protein.get_amino_acid_count(file)\r\n        self.assertEqual(expected_amino_acid_count, actual_amino_acid_count)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    unittest.main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/Electro1DTests/ProteinTest.py b/backend/Electro1DTests/ProteinTest.py
--- a/backend/Electro1DTests/ProteinTest.py	
+++ b/backend/Electro1DTests/ProteinTest.py	
@@ -84,9 +84,10 @@
         self.assertEqual(parsed_sequence[3], "gi|2765564|emb|Z78439.1|PBZ78439 P.barbatum 5.8S rRNA gene and ITS1 and ITS2 DNA")
 
     def test_get_orchid_mw(self):
-        expected_mw = 49046.902099999956
+        expected_mw = 49046.9021
         with open("Electro1DSampleTestFiles/ls_orchid.fasta") as file:
             actual_mw = self.protein.get_mw(file)
+        print(actual_mw)
         self.assertEqual(expected_mw, actual_mw)
 
     def test_get_orchid_amino_acid_count(self):
@@ -104,7 +105,7 @@
         self.assertEqual(parsed_sequence[3], "gi|1790865|gb|AAC77356.1| orf, hypothetical protein [Escherichia coli K12]")
 
     def test_get_e_coliK12_mw(self):
-        expected_mw = 25258.74990000001
+        expected_mw = 25258.7499
         with open("Electro1DSampleTestFiles/e_coliK12.faa") as file:
             actual_mw = self.protein.get_mw(file)
         self.assertEqual(expected_mw, actual_mw)
Index: backend/Electro1D/Protein.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Protein Class represents properties and behaviors related to a protein.\r\n# Note: GUI-related fragments have been removed from this class.\r\n# @author Mack Leonard, Amr Mualla, & Bader Alharbi\r\nfrom Bio import SeqIO\r\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\r\nclass Protein:\r\n\r\n    # Initializes a new instance of the Protein class.\r\n    # @param name: Short name of the protein. Defaults to \"notSet\".\r\n    # @param full_name: Full name of the protein. Defaults to \"notSet\".\r\n    # @param abbr: Abbreviation for the protein. Defaults to \"notSet\".\r\n    # @param mw: Molecular weight of the protein. Defaults to 0.\r\n    # @param color: Color representation (RGB) of the protein. Defaults to blue.\r\n    def __init__(self, name=\"notSet\", full_name=\"notSet\", abbr=\"notSet\", mw=0, color=(0, 0, 255)):\r\n        self.concentration = 1   # Default concentration of the protein.\r\n        self.start_y = 0         # Starting y-coordinate.\r\n        self.scale_factor = 0.0  # Factor for scaling.\r\n        self.relative_migration = 0.0 # Relative migration value.\r\n        self.speed = 0.01        # Speed of protein movement.\r\n        self.mw = mw             # Molecular weight of the protein.\r\n        self.charge = 0.0        # Charge on the protein.\r\n        self.name = name         # Short name of the protein.\r\n        self.full_name = full_name # Full name of the protein.\r\n        self.abbr = abbr         # Abbreviation for the protein.\r\n        self.selected = False    # Flag indicating if protein is selected.\r\n        self.color = color       # Color representation (RGB) of the protein.\r\n        # GUI related attributes for positioning and plotting.\r\n        self.x1 = 0\r\n        self.y1 = 0\r\n        self.width = 0\r\n        self.height = 2\r\n        self.y1_float = 0.0\r\n        self.max_position = 0\r\n        self.distance = 0.0\r\n        self.decider = 1\r\n        self.counter = 1\r\n        self.plot_y_pos = 0\r\n        self.plot_x_pos = 0\r\n\r\n    # Sets the starting position of the protein on the GUI.\r\n    # @param x: The x-coordinate for the starting position.\r\n    # @param y: The y-coordinate for the starting position.\r\n    def set_start_position(self, x, y):\r\n        self.x1 = x\r\n        self.y1 = y\r\n        self.start_y = self.y1\r\n        self.y1_float = float(self.y1)\r\n\r\n    # Resets the decision counter.\r\n    def reset_decider(self):\r\n        self.decider = 1\r\n        self.counter = 1\r\n\r\n    # Incrementally updates the position of the protein based on its speed.\r\n    def incr_position(self):\r\n        if self.counter == self.decider:\r\n            self.y1_float += self.speed\r\n            self.counter = 1\r\n        else:\r\n            self.counter += 1\r\n        self.y1 = int(self.y1_float)\r\n\r\n    # Checks if a point (x,y) matches with the protein's position.\r\n    # @param x: x-coordinate of the point.\r\n    # @param y: y-coordinate of the point.\r\n    def match_position(self, x, y):\r\n        x2 = self.x1 + self.width\r\n        y2 = self.y1 + self.height\r\n        range_val = 2\r\n        return x >= self.x1 - range_val and x <= x2 + range_val and y >= self.y1 - range_val and y <= y2 + range_val\r\n\r\n    # Sets the width of the protein representation in the GUI.\r\n    # @param w: The desired width value.\r\n    def set_width(self, w):\r\n        self.width = w\r\n\r\n    # Returns the current value of the decider.\r\n    def get_decider(self):\r\n        return self.decider\r\n\r\n    # Sets the decider value.\r\n    # @param i: The desired decider value.\r\n    def set_decider(self, i):\r\n        self.decider = i\r\n\r\n    # Sets the scaling factor.\r\n    # @param f: The scaling factor value.\r\n    def set_host_scale_factor(self, f):\r\n        self.scale_factor = f\r\n\r\n    # Sets the maximum possible position for the protein.\r\n    # @param i: The maximum position value.\r\n    def set_max_position(self, i):\r\n        self.max_position = i\r\n\r\n    # Sets the concentration of the protein.\r\n    # @param i: New concentration value to be set.\r\n    def set_concentration(self, i):\r\n        self.concentration = i\r\n\r\n    # Checks if a given point (x,y) is close to the protein's plotting position.\r\n    # The point is considered a match if it is within a range of 3 units from the protein's position.\r\n    # @param x: x-coordinate of the point.\r\n    # @param y: y-coordinate of the point.\r\n    # @return: True if the point matches the protein's plotting position, False otherwise.\r\n    def match_plot_position(self, x, y):\r\n        range_val = 3\r\n        return x >= self.plot_x_pos - range_val and x <= self.plot_x_pos + range_val and y >= self.plot_y_pos - range_val and y <= self.plot_y_pos + range_val\r\n\r\n    # Calculates the distance traveled by the protein based on the scale factor.\r\n    # The distance is determined as the scaled difference between the current and starting y-coordinates.\r\n    # @return: Calculated distance traveled by the protein.\r\n    def get_distance(self):\r\n        self.distance = self.scale_factor * (self.y1 - self.start_y)\r\n        return self.distance\r\n\r\n    # Utilizes Biopython SeqIO library to parse through a fasta file given by the user and collect\r\n    # information stored within the file\r\n    # @return: Sequence identifier, amino acid sequence, length of amino acid sequence\r\n    def parse_protein(self, file):\r\n        seq_id = \"\"\r\n        sequence = \"\"\r\n        seq_len = 0\r\n        seq_name = \"\"\r\n        for seq_record in SeqIO.parse(file, \"fasta\"):\r\n            seq_id = seq_record.id\r\n            sequence = seq_record.seq\r\n            seq_len = len(seq_record)\r\n            seq_name = seq_record.description\r\n        return seq_id, sequence, seq_len, seq_name\r\n\r\n    # Utilizes the ProteinAnalysis object to get a sequence of amino acids and calculate the molecular weight\r\n    # @return: molecular weight of the protein from fasta file given by user\r\n    def get_mw(self, file):\r\n        seq = ProteinAnalysis(self.parse_protein(file)[1])\r\n        self.mw = seq.molecular_weight()\r\n        return self.mw\r\n\r\n    # Utilizes the ProteinAnalysis object to get a sequence of amino acids and finds the number of amino acids\r\n    # @return: the number of amino acids from fasta file given by user\r\n    def get_amino_acid_count(self, file):\r\n        seq = ProteinAnalysis(self.parse_protein(file)[1])\r\n        return seq.count_amino_acids()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/Electro1D/Protein.py b/backend/Electro1D/Protein.py
--- a/backend/Electro1D/Protein.py	
+++ b/backend/Electro1D/Protein.py	
@@ -141,3 +141,5 @@
     def get_amino_acid_count(self, file):
         seq = ProteinAnalysis(self.parse_protein(file)[1])
         return seq.count_amino_acids()
+
+
Index: .idea/RITSimulationofProteinSimulations.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"TemplatesService\">\r\n    <option name=\"TEMPLATE_FOLDERS\">\r\n      <list>\r\n        <option value=\"$MODULE_DIR$/frontend/jbio-web-app/node_modules/workbox-build/src/templates\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"TestRunnerService\">\r\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"pytest\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/RITSimulationofProteinSimulations.iml b/.idea/RITSimulationofProteinSimulations.iml
--- a/.idea/RITSimulationofProteinSimulations.iml	
+++ b/.idea/RITSimulationofProteinSimulations.iml	
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Python 3.12" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="TemplatesService">
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"JavaScriptSettings\">\r\n    <option name=\"languageLevel\" value=\"ES6\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.7\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,7 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.12" />
+  </component>
   <component name="JavaScriptSettings">
     <option name="languageLevel" value="ES6" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
